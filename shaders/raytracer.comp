#version 430

#define BRICK_SIZE 8
#define EPSILON 1e-3

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct HitPayload {
    float hitDistance;
    vec3 position;
    vec3 normal;
    int materialIndex;
};

struct Material {
    vec3 albedo;
    float roughness;
    float metallic;
    vec3 emissionColor;
    float emissionPower;
};

struct Brick {
    int offSet;
    int type;
};

layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, binding = 0) uniform image2D colorbuffer;

layout(std430, binding = 1) readonly buffer sceneData{
    int[] voxelGrid;
};

layout(std430, binding = 2) readonly buffer sceneDataBrick{
    Brick[] brickGrid;
};

layout(std430, binding = 3) readonly buffer sceneDataVoxels{
    int[] voxelInBrickGrid;
};

uniform ivec3 gridSize;

uniform vec3 cameraPosition;
uniform vec3 objectPosition;
uniform mat4 inverseProjectionMatrix;
uniform mat4 inverseViewMatrix;
uniform int rendererRandom;
uniform int maxAccumulations;

const int bounces = 50;
const vec3 backgroundColor = vec3(0.6, 0.7, 0.9);
const float M_PI = 3.14159265358979323846;

//Direct light
const vec3 playerEmissionColor = vec3(1);
const float playerEmissionPower = 50;
const vec3 sunEmissionColor = vec3(1);
const float sunEmissionPower = 0.5;
const vec3 sunDirection = normalize(vec3(1,-1,1));

const int objectMaterial = 3;

const Material[] materials = {
    Material(vec3(0,0,0), 0, 0, vec3(1), 0),
    Material(vec3(0.7,0.4,0), 1, 0, vec3(1,0,0), 0),
    Material(vec3(0,0.7,0.1), 0.7, 0, vec3(0,1,0), 0),
    Material(vec3(0.5,0.5,0.5), 0, 0, vec3(1,1,1), 2),
    Material(vec3(0.7,0.7,0.9), 0, 0, vec3(1,1,1), 0)
};


// Utility function to calculate intersection with grid boundaries
bool intersectGridBounds(Ray ray, out ivec3 voxelPosition, out float tEntry, out vec3 normal) {

    vec3 step = sign(ray.direction);

    vec3 tMin = (vec3(0.0) - ray.origin) / ray.direction;
    vec3 tMax = (vec3(gridSize) - ray.origin) / ray.direction;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    tEntry = max(max(t1.x, t1.y), t1.z);

    if(tEntry == t1.x){
        normal = vec3(-step.x, 0, 0);
    } else if(tEntry == t1.y){
        normal = vec3(0, -step.y, 0);
    } else{
        normal = vec3(0, 0, -step.z);
    }

    float tExit = min(min(t2.x, t2.y), t2.z);

    if (tEntry > tExit) {
        return false; // No intersection with grid
    }

    if (tEntry < 0){
        return false;
    }

    vec3 intersectionPoint = ray.origin + ray.direction * tEntry;

    intersectionPoint += EPSILON * normalize(ray.direction);

    voxelPosition = ivec3(floor(intersectionPoint));

    return true;
}

HitPayload traceRayVoxelGrid(Ray ray) {
    HitPayload hitPayload;
    hitPayload.hitDistance = 0.0;
    hitPayload.normal = vec3(0.0);
    hitPayload.materialIndex = 0;

    Brick brick;
    bool brickMode = false;

    ivec3 brickNum = gridSize/BRICK_SIZE;

    ivec3 voxelPosition;
    ivec3 brickPosition;
    float t = 0;
    vec3 normal = vec3(0);
    vec3 position;

    vec3 invDir = 1.0 / ray.direction;
    ivec3 stepInGrid = ivec3(sign(ray.direction));

    // If the ray starts inside the grid, use the original ray origin
    if (!(ray.origin.x < 0.0 || ray.origin.x >= float(gridSize.x) ||
    ray.origin.y < 0.0 || ray.origin.y >= float(gridSize.y) ||
    ray.origin.z < 0.0 || ray.origin.z >= float(gridSize.z))) {
        voxelPosition = ivec3(floor(ray.origin));
    }

    // If it is outside check if it will intersect the grid or not
    else{
        if (!intersectGridBounds(ray, voxelPosition, t, normal)){
            hitPayload.hitDistance = -1;
            return hitPayload;
        }
    }

    brickPosition = voxelPosition/BRICK_SIZE;
    brick = brickGrid[brickPosition.x + brickPosition.z*brickNum.x + brickPosition.y*brickNum.x*brickNum.z];
    if(brick.type != -1 && brick.type != 0){
        hitPayload.materialIndex = voxelGrid[voxelPosition.x + voxelPosition.z * gridSize.x + voxelPosition.y * gridSize.x * gridSize.z];
        hitPayload.hitDistance = t;
        hitPayload.normal = normalize(normal);
        hitPayload.position = ray.direction * t + ray.origin;
        return hitPayload; // Hit
    }

    // Calculate tMax and tDelta
    vec3 tMax = (vec3((voxelPosition) + (stepInGrid*0.5 + 0.5) ) - ray.origin) * invDir;
    if(brick.type != -1){
        tMax = (vec3((voxelPosition-voxelPosition%BRICK_SIZE) + (stepInGrid*0.5 + 0.5)*BRICK_SIZE ) - ray.origin) * invDir;
        brickMode = true;
    }

    vec3 tDelta = abs(invDir);

    int i = 0;

    while (i<10000) {
        i++;

        if(brickMode){

            // Check if the current brick is out of the grid bounds
            if (brickPosition.x < 0 || brickPosition.x >= brickNum.x ||
            brickPosition.y < 0 || brickPosition.y >= brickNum.y ||
            brickPosition.z < 0 || brickPosition.z >= brickNum.z) {
                hitPayload.hitDistance = -1;
                return hitPayload;
            }

            // Check if the current brick is only a block
            brick = brickGrid[brickPosition.x + brickPosition.z*brickNum.x + brickPosition.y*brickNum.x*brickNum.z];
            if (brick.type != 0 && brick.type != -1) {
                hitPayload.materialIndex = brick.type;
                hitPayload.hitDistance = t;
                hitPayload.normal = normalize(normal);
                hitPayload.position = ray.direction * t + ray.origin;
                return hitPayload; // Hit
            }

            //Switch to voxelMode
            if (brick.type == -1){

                vec3 intersectionPoint = ray.origin + ray.direction * t;
                intersectionPoint += EPSILON * normalize(ray.direction);
                voxelPosition = ivec3(floor(intersectionPoint));

                tMax = (vec3((voxelPosition) + (stepInGrid*0.5 + 0.5) ) - ray.origin) * invDir;

                brickMode = false;

            }
            else{

                // Traverse the grid with brick steps
                if (tMax.x < tMax.y) {
                    if (tMax.x < tMax.z) {
                        brickPosition.x += stepInGrid.x;
                        t = tMax.x;
                        normal = vec3(-stepInGrid.x, 0, 0);
                        tMax.x += tDelta.x*BRICK_SIZE;
                    } else {
                        brickPosition.z += stepInGrid.z;
                        t = tMax.z;
                        normal = vec3(0, 0, -stepInGrid.z);
                        tMax.z += tDelta.z*BRICK_SIZE;
                    }
                } else {
                    if (tMax.y < tMax.z) {
                        brickPosition.y += stepInGrid.y;
                        t = tMax.y;
                        normal = vec3(0, -stepInGrid.y, 0);
                        tMax.y += tDelta.y*BRICK_SIZE;
                    } else {
                        brickPosition.z += stepInGrid.z;
                        t = tMax.z;
                        normal = vec3(0, 0, -stepInGrid.z);
                        tMax.z += tDelta.z*BRICK_SIZE;
                    }
                }
            }
        }

        else{

            // Check if the current voxel is out of the grid bounds
            if (voxelPosition.x < 0 || voxelPosition.x >= gridSize.x ||
            voxelPosition.y < 0 || voxelPosition.y >= gridSize.y ||
            voxelPosition.z < 0 || voxelPosition.z >= gridSize.z) {
                hitPayload.hitDistance = -1;
                return hitPayload;
            }

            // Check if the current voxel is a block
            if (voxelGrid[voxelPosition.x + voxelPosition.z * gridSize.x + voxelPosition.y * gridSize.x * gridSize.z] != 0) {
                hitPayload.materialIndex = voxelGrid[voxelPosition.x + voxelPosition.z * gridSize.x + voxelPosition.y * gridSize.x * gridSize.z];
                hitPayload.hitDistance = t;
                hitPayload.normal = normalize(normal);
                hitPayload.position = ray.direction * t + ray.origin;
                return hitPayload; // Hit
            }

            //Switch to brick mode
            brickPosition = voxelPosition/BRICK_SIZE;
            brick = brickGrid[brickPosition.x + brickPosition.z*brickNum.x + brickPosition.y*brickNum.x*brickNum.z];
            if (brick.type != -1){
                tMax = (vec3((voxelPosition-voxelPosition%BRICK_SIZE) + (stepInGrid*0.5 + 0.5)*BRICK_SIZE ) - ray.origin) * invDir;
                brickMode = true;
            }
            else{

                // Traverse the grid with voxel steps
                if (tMax.x < tMax.y) {
                    if (tMax.x < tMax.z) {
                        voxelPosition.x += stepInGrid.x;
                        t = tMax.x;
                        normal = vec3(-stepInGrid.x, 0, 0);
                        tMax.x += tDelta.x;
                    } else {
                        voxelPosition.z += stepInGrid.z;
                        t = tMax.z;
                        normal = vec3(0, 0, -stepInGrid.z);
                        tMax.z += tDelta.z;
                    }
                } else {
                    if (tMax.y < tMax.z) {
                        voxelPosition.y += stepInGrid.y;
                        t = tMax.y;
                        normal = vec3(0, -stepInGrid.y, 0);
                        tMax.y += tDelta.y;
                    } else {
                        voxelPosition.z += stepInGrid.z;
                        t = tMax.z;
                        normal = vec3(0, 0, -stepInGrid.z);
                        tMax.z += tDelta.z;
                    }
                }
            }
        }

    }

    hitPayload.hitDistance = -1;
    return hitPayload;
}

uint PCGHash(uint input)
{
    uint state = input * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float randFloat(inout uint seed){
    seed = PCGHash(seed);
    return float(seed)/float(0xFFFFFFFFu);
}

vec3 randSphere(inout uint seed){
    return normalize(vec3(
        2*(randFloat(seed) - 0.5),
        2*(randFloat(seed) - 0.5),
        2*(randFloat(seed) - 0.5)
    ));

}

vec3 randHemisphere(inout uint seed, vec3 normal){
    vec3 v = randSphere(seed);
    return v * sign(dot(v, normal));
}

float sdfSphere(vec3 position, float radius){
    return length(position) - radius;
}

float sdfBox(vec3 position, vec3 dimensions){
    vec3 q = abs(position) - dimensions;
    return length(max(q,0)) + min(max(q.x,max(q.y,q.z)),0);
}

float sdfSolidAngle(vec3 position, float angle, float ra){
    vec2 c = vec2(sin(angle), cos(angle));
    vec2 q = vec2( length(position.xz), position.y );
    float l = length(q) - ra;
    float m = length(q - c*clamp(dot(q,c),0.0,ra) );
    return max(l,m*sign(c.y*q.x-c.x*q.y));
}

float map(vec3 position){
    float solidAngle = sdfSphere(position - objectPosition, 1);

    return solidAngle;
}

vec3 calculateNormal(vec3 position){
    vec2 h = vec2(EPSILON,0);
    return normalize(vec3( map(position+h.xyy) - map(position-h.xyy), map(position+h.yxy) - map(position-h.yxy), map(position+h.yyx) - map(position-h.yyx) ));
}

//To render off grid objects
HitPayload traceRayOffGrid(Ray ray){
    HitPayload hitPayload;
    hitPayload.hitDistance = 0.0;
    hitPayload.normal = vec3(0.0);
    hitPayload.materialIndex = 0;
    float t = 0;

    for(int i = 0; i < 80; i++){
        vec3 p = ray.origin + ray.direction*t;

        float d = map(p);

        t += d;

        if(t > 1000){
            hitPayload.hitDistance = -1;
            return hitPayload;
        }

        if(d < EPSILON){
            t -= 3*EPSILON;
            hitPayload.hitDistance = t;
            hitPayload.position = ray.origin + ray.direction*t;
            hitPayload.normal = calculateNormal(p);
            hitPayload.materialIndex = objectMaterial;
            return hitPayload;
        }

    }

    hitPayload.hitDistance = -1;
    return hitPayload;

}

HitPayload traceRay(Ray ray){

    HitPayload hitVoxelGrid = traceRayVoxelGrid(ray);
    HitPayload hitOffGrid = traceRayOffGrid(ray);


    //Test if both rays hit nothing
    if(hitVoxelGrid.hitDistance<0 && hitOffGrid.hitDistance<0){
        return hitVoxelGrid; //Return any of the hits
    }

    //Test if it hit first at the voxel grid
    if(hitVoxelGrid.hitDistance < hitOffGrid.hitDistance){
        if(hitVoxelGrid.hitDistance>0)
            return hitVoxelGrid;
        else
            return hitOffGrid;
    }

    //Test if it hit first at the off grid
    if(hitVoxelGrid.hitDistance > hitOffGrid.hitDistance && hitOffGrid.hitDistance>0){
        if(hitOffGrid.hitDistance>0)
            return hitOffGrid;
        else
            return hitVoxelGrid;
    }



    return hitVoxelGrid;

}

vec3 getDirectionLight(vec3 lightDirection, vec3 emission, vec3 normal, vec3 viewDirection, vec3 contribution){

    lightDirection = normalize(lightDirection);
    vec3 reflectDirection = reflect(lightDirection, normal);

    float diff = max(dot(normal, -lightDirection), 0);

    vec3 diffuse = emission * diff;

    return diffuse*contribution;
}

vec3 getPointLight(vec3 lightPosition, vec3 emission, float constantAttenuation, float linearAttenuation, float quadraticAttenuation, vec3 surfacePosition, vec3 normal, vec3 viewDirection, vec3 contribution){

    vec3 lightDirection = normalize(surfacePosition - lightPosition);
    vec3 reflectDirection = reflect(lightDirection, normal);

    float diff = max(dot(normal, -lightDirection), 0);
    float spec = pow(max(dot(viewDirection, reflectDirection), 0), 32);

    float dist = length(surfacePosition - lightPosition);
    float attenuation = 1.0 / (constantAttenuation + linearAttenuation * dist + quadraticAttenuation * dist * dist);

    vec3 diffuse = emission * diff * attenuation;

    return diffuse*contribution;

}

bool isPointVisible(vec3 surfacePosition, vec3 pointPosition){

    Ray ray;
    ray.origin = surfacePosition;
    ray.direction = pointPosition - surfacePosition;

    float dist = length(ray.direction);
    ray.direction = normalize(ray.direction); //Normalzie direction to get a precise hitDistance from hitPayload
    HitPayload hitPayload = traceRay(ray);

    return (hitPayload.hitDistance < 0 || hitPayload.hitDistance > dist);

}

bool isSkyVisible(vec3 surfacePosition, vec3 direction){

    Ray ray;
    ray.origin = surfacePosition;
    ray.direction = direction;

    HitPayload hitPayload = traceRay(ray);

    return (hitPayload.hitDistance < 0);

}

vec3 calculateDirectLight(vec3 surfacePosition, vec3 normal, vec3 contribution){
    vec3 viewDir = normalize(cameraPosition - surfacePosition);
    vec3 light = vec3(0);
    vec3 preLight; // Used to test if the light is strong enough to worth sending rays
    float threshold = EPSILON;

    // Sun light
    preLight = getDirectionLight(sunDirection, sunEmissionColor*sunEmissionPower, normal, viewDir, contribution);
    if (length(preLight) > threshold){
        if(isSkyVisible(surfacePosition, -sunDirection)){
            light += preLight;
        }
    }

    // Player light
    preLight = getPointLight(cameraPosition, playerEmissionColor*playerEmissionPower, 0, 0, 4*M_PI, surfacePosition, normal, viewDir, contribution);
    if (length(preLight) > threshold){
        if(isPointVisible(surfacePosition, cameraPosition)){
            light += preLight;
        }
    }

//    // Object light
//    preLight = getPointLight(objectPosition, vec3(1,1,1)*10, 0, 5, 0, surfacePosition, normal, viewDir, contribution);
//    if (length(preLight) > threshold){
//        if(isPointVisible(surfacePosition, objectPosition)){
//            light += preLight;
//        }
//    }

    return light;
}

void main() {

    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(colorbuffer);
    if (pixelPos.x >= screen_size.x || pixelPos.y >= screen_size.y) {
        return;
    }

    uint seed = uint((pixelPos.x<<16) + (pixelPos.y) + rendererRandom);

    Ray ray;

    vec2 coord = vec2( float(pixelPos.x) / float(screen_size.x), float(pixelPos.y) / float(screen_size.y));
    coord = coord * 2 - 1;

    vec4 target = inverseProjectionMatrix * vec4(coord.x, coord.y, 1, 1);
    vec3 cameraRayDirection = normalize(vec3(inverseViewMatrix * vec4(normalize(vec3(target) / target.w), 0)));

    HitPayload hitPayload;
    Material material;


    vec3 accumulatedLight = vec3(0);
    int numberOfAccumulationsPerRaytrace = 1;

    for(int i = 0; i < numberOfAccumulationsPerRaytrace; i++){
        seed += i;
        vec3 light = vec3(0);
        vec3 contribution = vec3(1);
        vec3 normal;
        ray.origin = cameraPosition;
        ray.direction = cameraRayDirection;
        for (int j = 0; j < bounces; j++){
            seed += j;
            //Russian Roulette stop the ray by chance if the contribution is too low
            float r = randFloat(seed);
            if(r > length(contribution)/length(vec3(1))*2)
                break;

            hitPayload = traceRay(ray);

            if (hitPayload.hitDistance < 0) {
                light += backgroundColor * contribution;
                break;
            }

            material = materials[hitPayload.materialIndex];
            vec3 perfectReflection = reflect(ray.direction, hitPayload.normal); //Get the perfect reflection direction for future calculations on indirect light
            normal = hitPayload.normal;

            //Translate ray contact with object to avoid imprecisions
            ray.origin = hitPayload.position + hitPayload.normal * 0.001;

            //Get pixel color based on the material contribuition
            contribution *= material.albedo;
            light += material.emissionColor*material.emissionPower*contribution;//*max(0, dot(normalize(-ray.direction), normal));

            if(material.emissionPower > 1)
                    break; //Break if it is an emissive object (it doesn't matter)

            //Direct light calculations
            light += calculateDirectLight(ray.origin, normal, contribution);

            //Indirect light continue
            //Change the ray direction to a random direction following the surface diffuse properties


            ray.direction = normalize(randHemisphere(seed, normal) + perfectReflection*(1/(material.roughness+EPSILON)-1));


        }

        accumulatedLight += clamp(light, 0, 1);
    }


    imageStore(colorbuffer, pixelPos, vec4(accumulatedLight/float(numberOfAccumulationsPerRaytrace), 1.0));
}
